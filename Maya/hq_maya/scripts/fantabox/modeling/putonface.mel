global proc putonface()
{
    if(`window -exists wkprojectObjDisplayWindow`)
    deleteUI wkprojectObjDisplayWindow;
    window -t "物体吸附地面" -widthHeight  450 250 wkprojectObjDisplayWindow;
    columnLayout -cal "center" -co "left" 3;
      separator -w 450;
      textFieldButtonGrp -w 450 -rat 2 "bottom" 8 -rat 3 "bottom" 8 -h 40 -cw 1 60 -cw 2 280 -cat 1 "left" 0  -label "选取地面: " -ed 0 -text "加载用于投射的表面(只适用于polygonal表面！)" -buttonLabel "拾取表面" -buttonCommand "inputMeshBrowser" textButton;
        separator -w 450;
       text -h 25 -l "吸附物体:" projectObjTxt ;
      textScrollList -w 425 -h 100 -append "添加一个或者多个吸附物体"  -allowMultiSelection true projectionObjList ;
        popupMenu -parent projectionObjList;
        menuItem -label "添加所选吸附物体" -command "getSelectObj()";
        menuItem -divider true ;
        menuItem -label "清除列表" -command "clearSelectionList()" ;
    rowLayout -nc 2  -cat 1 "left" 100 -cat 2 "left" 110 -rat 1 "top" 3 -rat 2 "top" 3 -cl2 "center" "center";	
   button -l "添加所选" -command "getSelectObj()" -w 100;button -l "清空列表" -command "clearSelectionList()" -w 100;
  setParent..;
    separator -w 450;
    columnLayout;
   radioButtonGrp -sl 1 -cat 1 "left" 90 -cat 2 "left" 60  -numberOfRadioButtons 1
    -label "吸附后物体朝向: " -l1 "物体Y轴" normalConstrainCheck;
    radioButtonGrp -cat 2 "left" 60 -numberOfRadioButtons 1 -shareCollection normalConstrainCheck
    -label "" -l1 "表面法线";
  setParent..;
   separator -w 450;
    rowLayout -nc 1  -cat 1 "left" 50  -rat 1 "top" 6  -cl1 "center";
  button -h 30  -w 320 -l "吸附" -c "showProgressWindow"  doallObjMoveButton;  		
  showWindow;
}
/*
global proc initWindow()
{
    if(`window -exists projectObjDisplayWindow`)
    deleteUI projectObjDisplayWindow;
    window -t "ProjectionObj In Maya" -widthHeight  350 250 projectObjDisplayWindow;
    columnLayout;
    frameLayout -label "加载" -labelAlign "bottom" -borderStyle "etchedOut" -w 380 ;
    columnLayout;
    textFieldButtonGrp -w 350 -cw 1 60 -cw 2 250 -cat 1 "left" 0  -label "投射表面: " -ed 0 -text "加载用于投射的表面(只适用于polygonal表面！)" -buttonLabel "<<<" -buttonCommand "inputMeshBrowser" textButton;
   
   formLayout mainForm;
   text -l "投射物体:" projectObjTxt ;
   text -l "投射前请确定投射表面已执行 Freeze Transformations!" warningTxt ;

    button -h 30 -w 70 -l "执行投射" -c "showProgressWindow"  doallObjMoveButton;
    textScrollList -w 305 -h 80 -append "右键添加一个或者多个投射物体"  -allowMultiSelection true projectionObjList ;
        popupMenu -parent projectionObjList;
        menuItem -label "添加所选投射物体" -command "getSelectObj()";
        menuItem -divider true ;
        menuItem -label "清除列表" -command "clearSelectionList()" ;
     formLayout -e
        -af projectObjTxt "top" 15
		-an projectObjTxt "bottom"
		-af projectObjTxt "left" 5
		-an projectObjTxt "right"

        -af projectionObjList "top" 15
		-an projectionObjList "bottom"
		-af projectionObjList "left" 60
		-an projectionObjList "right"

        -af doallObjMoveButton "top" 100
		-an doallObjMoveButton "bottom"
		-af doallObjMoveButton "left" 295
		-an doallObjMoveButton "right"

        -af warningTxt "top" 105
		-an warningTxt "bottom"
		-af warningTxt "left" 5
		-an warningTxt "right"
    mainForm;
    setParent..;
    setParent..;
    setParent..;
    frameLayout -label "法线约束" -labelAlign "bottom" -borderStyle "etchedOut" -w 380 ;
     columnLayout;
      floatFieldGrp -numberOfFields 3 -cw 1 60
       -label "约束方向" -extraLabel "XYZ"
       -value1 0.0 -value2 1.0 -value3 0.0  normalDirection;

    formLayout mainForm2;
    text -l ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" warningTxt2 ;
    button -h 30 -w 70 -l "执行约束" -c "doConstrain"  doConstrainButton;
    formLayout -e
        -af warningTxt2 "top" 10
		-an warningTxt2 "bottom"
		-af warningTxt2 "left" 5
		-an warningTxt2 "right"

        -af doConstrainButton "top" 5
		-an doConstrainButton "bottom"
		-af doConstrainButton "left" 295
		-an doConstrainButton "right"
    mainForm2;

  showWindow;
}
*/

global proc showProgressWindow()
{
    string $inputMesh=`textFieldButtonGrp -q -tx textButton`;
    string $selectobject[]=`textScrollList -q -allItems  projectionObjList`;
    int $numObj=size($selectobject);
    float $amount = 0;
    int $amount1=0;
    int $i=0; 
    int $m=`radioButtonGrp -q -sl normalConstrainCheck`;


     progressWindow
         -title "计算中..."
         -progress $amount1
         -status "已执行: 0%"
         -isInterruptable true;

     for ($i=0;$i<size($selectobject);$i++) {
         // Check if the dialog has been cancelled
         if ( `progressWindow -query -isCancelled` ) break;
         // Check if end condition has been reached
         if ( `progressWindow -query -progress` >= 100 ) break;

         $amount += (100/float($numObj));
         $amount1=$amount;

         progressWindow -edit
             -progress $amount1
             -status ("已执行: "+$amount1+"%");
         
       string $face2[]=getInterectFaceId($inputMesh,$selectobject[$i]);
       if(size($face2)==0)
       {continue;}
       moveObj($inputMesh,$selectobject[$i]);
           if($m==0)
           {    

            string $constraintName[]=`normalConstraint  -aimVector 0 1 0 $inputMesh $selectobject[$i]`;
            delete $constraintName[0];
            }
    
     }
     progressWindow -endProgress;
}

global proc doConstrain()
{
    string $inputMesh=`textFieldButtonGrp -q -tx textButton`;
    string $selectobject[]=`textScrollList -q -allItems  projectionObjList`;
    float $aimVector[3]=`floatFieldGrp -q -value normalDirection`;
    for($i=0;$i<size($selectobject);$i++)
    {
    string $constraintName[]=`normalConstraint  -aimVector $aimVector[0] $aimVector[1] $aimVector[2] $inputMesh $selectobject[$i]`;
    delete $constraintName[0];}
    }
    
global proc getSelectObj()
{
    string $selItems[] = `ls -sl`;	
    textScrollList -e -removeAll projectionObjList ;
    for ($i = 0; $i<size($selItems);$i++)
    {
        textScrollList -e -a $selItems[$i] projectionObjList ;
        }
    }
global proc clearSelectionList()
{
    textScrollList -e -removeAll projectionObjList ;
}
global proc doallObjMove()
{
    string $inputMesh=`textFieldButtonGrp -q -tx textButton`;
    string $selectobject[]=`textScrollList -q -allItems  projectionObjList`;
    for($i=0;$i<size($selectobject);$i++)
    {string $face2[]=getInterectFaceId($inputMesh,$selectobject[$i]);
     if(size($face2)==0)
     {continue;}
     moveObj($inputMesh,$selectobject[$i]);
    }  
}
global proc inputMeshBrowser()
{
	string $objs[] = `ls -sl -fl` ;
	string $base = $objs[0] ;
	
	textFieldButtonGrp -e -tx $base textButton;
	
	if ($base == "" || objExists($base) != true)
		return ;
}
global proc getInMesh()
{ 
  global string $inMesh;
  global int $faceNum;
  string $selectedMesh[]=`ls -sl`;
  if(size($selectedMesh)!=1)
   {error "所选表面不唯一！";}
   $inMesh=$selectedMesh[0];
  if(`objectType $selectedMesh`=="transform")
   {string $inMesh2[]=`pickWalk -d down $selectedMesh[0]`;
    $inMesh=$inMesh2[0];
     }
  int $faceNum2[]=`polyEvaluate -f $inMesh`;
  $faceNum=$faceNum2[0];
} 
global proc float[] getVertexPosition(string $selectVertex)
{
    float $getPosition[]=`xform -q -t -ws $selectVertex`;
    return $getPosition;
    }
global proc float[] getObjPosition(string $selectObj)
{
  float $getPosition[]=getObjBoundingBox($selectObj);
  float $getPosition1[3]={($getPosition[0]+$getPosition[3])/2,$getPosition[1],($getPosition[2]+$getPosition[5])/2};
  return $getPosition1;
}

global proc float[] getObjBoundingBox(string $selectObj)
{
    float $objBoundingBox[]=`xform -q -bb $selectObj`;
    return $objBoundingBox;
    }
global proc getObjShape()
{
  global string $transformObj[];
  global string $shapeObj[];
  clear($transformObj);
  clear($shapeObj);
  string $allObj[]=`ls -sl`;
  int $i=0,$num=size($allObj),$j=0;
   for($i=0;$i<$num;$i++)
     {
      if(`objectType $allObj[$i]`!="transform")
       {string $objTransform[]=`pickWalk -d up $allObj[$i]`;
        $transformObj[$j]=$objTransform[0];
        $shapeObj[$j]=$allObj[$i];
        }
      if(`objectType $allObj[$i]`=="transform")
       {
        string $objShape[]=`pickWalk -d down $allObj[$i]`;
        $transformObj[$j]=$allObj[$i];
        $shapeObj[$j]=$objShape[0];           
       }
     ++$j;       
    }     
}
global proc string[] getFaceVertex(string $inputFace)
{
   // string $allVertex[]=`polyListComponentConversion -tv $inputFace`;
    string $allVertex[]=`polyInfo -fv $inputFace`;
    string $outPutVertex[];
    string $buffer1[],$buffer2[];
    int $i,$numTokens1,$numTokens2,$j=0,$allNum=size($allVertex),$m,$VertexId;
    $numTokens1 = `tokenize $allVertex[0] " " $buffer1`;
    $numTokens2 = `tokenize $inputFace "." $buffer2`;
    int $numVertex=$numTokens1-3;
  
    for($m=0;$m<$numVertex;$m++)
        {
            $VertexId=int($buffer1[2+$m]);
            $outPutVertex[$j]=$buffer2[0]+".vtx["+$VertexId+"]";
            ++$j;
            }
    return $outPutVertex;
    }
/*    
global proc float[] getBoundingBox(string $inputFace)
{
    float $boundingBoxPosition[];
    float $boundingBoxPosition2[];
    $boundingBoxPosition=`xform -q -bb $inputFace`;
    $boundingBoxPosition2[0]=$boundingBoxPosition[3];
    $boundingBoxPosition2[1]=$boundingBoxPosition[5];
    $boundingBoxPosition2[2]=$boundingBoxPosition[0];
    $boundingBoxPosition2[3]=$boundingBoxPosition[2];
    return $boundingBoxPosition2;
    }
*/
    

global proc float[] getBoundingBox(string $inputFace)
{
    string $inputVertex[];
    float $maxX,$maxZ,$minX,$minZ;
    float $vertexPosition[];
    float $boundingBoxPosition[];
    $inputVertex=getFaceVertex($inputFace);
    $vertexPosition=`xform -q -t -ws $inputVertex[0]`;
    $maxX=$minX=$vertexPosition[0];
    $maxZ=$minZ=$vertexPosition[2];
    int $i;
    for($i=1;$i<size($inputVertex);$i++)
    {
        if(size($inputVertex[$i])==0)
             continue;
        $vertexPosition=`xform -q -t -ws $inputVertex[$i]`;
        if($maxX<$vertexPosition[0])
            $maxX=$vertexPosition[0];
        if($minX>$vertexPosition[0])
            $minX=$vertexPosition[0];
        if($maxZ<$vertexPosition[2])
            $maxZ=$vertexPosition[2];
        if($minZ>$vertexPosition[2])
            $minZ=$vertexPosition[2];     
    }
    $boundingBoxPosition[0]=$maxX;
    $boundingBoxPosition[1]=$maxZ;
    $boundingBoxPosition[2]=$minX;
    $boundingBoxPosition[3]=$minZ;
    return $boundingBoxPosition;
}


global proc int judgeInterectBoundingBox(string $inputFace,string $selectObj)
{
    float $boundingboxposition[]=getBoundingBox($inputFace);
    float $selectObjposition[]=getObjPosition($selectObj);
    int $i1,$i2,$m1,$m2;
    int $judge=0;
    $i1=($boundingboxposition[0]>$selectObjposition[0])?0:1;
    $i2=($boundingboxposition[2]<$selectObjposition[0])?0:1;
    $m1=($boundingboxposition[1]>$selectObjposition[2])?0:1;
    $m2=($boundingboxposition[3]<$selectObjposition[2])?0:1;
    string $checkNum=string($i1)+string($i2)+string($m1)+string($m2);
    if($checkNum=="0000")
    {$judge=1;}
    return $judge;
    }

global proc string[] getInterectFaceId(string $inputMesh,string $selectObj)
{
    int $allface[]=`polyEvaluate -f $inputMesh`;
    int $i,$m,$j;
    string $interectFaceId[];
    for($i=0;$i<$allface[0];$i++)
    {
        string $faceName=$inputMesh+".f["+$i+"]";
        $m=judgeInterectBoundingBox($faceName,$selectObj);
        if($m==1)
            {$interectFaceId[$j]=$faceName;
                ++$j;}
        }
      if(size($interectFaceId)==0)
      {string $warning1="物体"+$selectObj+"并不位于表面"+$inputMesh+"之上！无法位移！";
       warning $warning1;}
        return $interectFaceId;
    }

global proc string[] getInterectFaceId2(string $inputMesh,string $selectObj)
{
    string $allInterectFaceId[]=getInterectFaceId($inputMesh,$selectObj);
    string $faceVertex[];
    string $finalFace[];
    int $faceNumber=size($allInterectFaceId);
    float $objPosition[]=getObjPosition($selectObj);
    float $vertexPosition1[],$vertexPosition2[];
    int $i,$j,$m,$n=0;
    for($i=0;$i<$faceNumber;$i++)
    {
        $m=0;
        $faceVertex=getFaceVertex($allInterectFaceId[$i]);
        for($j=0;$j<size($faceVertex);$j++)
        {if($j==size($faceVertex)-1)
            {$vertexPosition1=getVertexPosition($faceVertex[$j]);
             $vertexPosition2=getVertexPosition($faceVertex[0]);}
         else{$vertexPosition1=getVertexPosition($faceVertex[$j]);
               $vertexPosition2=getVertexPosition($faceVertex[$j+1]);}
         if(lineInterect($vertexPosition1,$vertexPosition2,$objPosition))
            {++$m;}
        }
    if($m%2)
    {$finalFace[$n]=$allInterectFaceId[$i];
        ++$n;}
    }
return $finalFace;
    
}

    


global proc int lineInterect(float $faceVertex1[],float $faceVertex2[],float $objPosition[])
{
	if(($faceVertex1[2]-$faceVertex2[2])==0)
    {return 0;}
    float $d1,$d2,$d3,$d4,$t1;
    $d1=$faceVertex1[0]-$objPosition[0];
    $d2=$faceVertex2[0]-$faceVertex1[0];
    $d3=$objPosition[2]-$faceVertex1[2];
    $d4=$faceVertex2[2]-$faceVertex1[2];
    $t1=$d1+$d2*$d3/float($d4);
    float $t2=$d3/float($d4);
    if($t1>0&&0<$t2&&$t2<1)
    {return 1;}
    else return 0;
    
    }
    
global proc float[] getInterectPos(string $finalFace,string $selectObj)
{
    string $faceVertex[]=getFaceVertex($finalFace);
    float $objPos[3]=getObjPosition($selectObj);
    float $vertexPos1[3]=getVertexPosition($faceVertex[0]);
    float $vertexPos2[3]=getVertexPosition($faceVertex[1]);
    float $vertexPos3[3]=getVertexPosition($faceVertex[2]);
    vector $faceLine1=<<$vertexPos2[0]-$vertexPos1[0],$vertexPos2[1]-$vertexPos1[1],$vertexPos2[2]-$vertexPos1[2]>>;
    vector $faceLine2=<<$vertexPos3[0]-$vertexPos1[0],$vertexPos3[1]-$vertexPos1[1],$vertexPos3[2]-$vertexPos1[2]>>;
    vector $faceNormal=cross($faceLine1,$faceLine2);
    vector $myvector=<<$vertexPos1[0]-$objPos[0],$vertexPos1[1]-$objPos[1],$vertexPos1[2]-$objPos[2]>>;
    float $t=dot($faceNormal,$myvector)/dot($faceNormal,<<0,1,0>>);
    float $interectPos[3]={$objPos[0],$objPos[1]+$t,$objPos[2]};
    return $interectPos;
    }

global proc float[] getMinMax(float $num[])
{
    int $i,$j;
    float $minMax[2];
    float $minNum=$num[0],$maxNum=$num[0];
    for($i=0;$i<size($num);$i++)
    {
        if($minNum>$num[$i])
        {$minNum=$num[$i];}
        if($maxNum<$num[$i])
        {$maxNum=$num[$i];}
        }
    $minMax[0]=$minNum;
    $minMax[1]=$maxNum;
    return $minMax;
    }

global proc moveObj(string $inputMesh,string $selectObj)
{
    string $finalFace[]=getInterectFaceId2($inputMesh,$selectObj);
    float $selectObjPos[]=getObjPosition($selectObj);
    int $i,$j=0,$m,$num1=0,$num2=0;
    float $lengthY,$minMaxLength[2];
    float $interectPos[];
    float $interectPos1[3];
    for($i=0;$i<size($finalFace);$i++)
    {
        $interectPos1=getInterectPos($finalFace[$i],$selectObj);
        $interectPos[$j]=$interectPos1[1];
        ++$j;
        }
    $minMaxLength=getMinMax($interectPos);
    $lengthY=$minMaxLength[0];
    if($selectObjPos[1]>=$minMaxLength[1])
    {$lengthY=$minMaxLength[1];}
    if($selectObjPos[1]<=$minMaxLength[0])
    {$lengthY=$minMaxLength[0];}
    if($selectObjPos[1]<$minMaxLength[1]&&$selectObjPos[1]>$minMaxLength[0])
    {
        for($m=0;$m<size($interectPos);++$m)
        {
            if($interectPos[$m]<$selectObjPos[1]&&$interectPos[$m]>$minMaxLength[0])
            {$lengthY=$interectPos[$m];}
            }
        }
    $lengthY=$lengthY-$selectObjPos[1];
    string $objAttr=$selectObj+".translateY";
    float $objtranslateY=`getAttr $objAttr`;
    $lengthY=$lengthY+$objtranslateY;
    setAttr $objAttr $lengthY;
    }
putonface();

