/* This file downloaded from Highend3d.com
''  
''  Highend3d.com File Information:
''  
''    Script Name: wp joints on curves
''    Author: william_petruccelli 
''    Last Updated: Jun 14, 2009
''    Update/Change this file at:
''    http://Highend3d.com/maya/downloads/mel_scripts/character/3069.html
''  
''  Please do not alter any information above this line
''  it is generated dynamically by Highend3d.com and will
''  be changed automatically on any updates.
*/
//======================================================================
//======================================================================
// ---->  Author Information  <----
//======================================================================
/*

William Petruccelli
email:	williampetruccelli@gmail.com
web site:	www.williampetruccelli.com

*/

//======================================================================
//======================================================================
// ---->  Script Information  <----
//======================================================================
/*

Creation Date:		June - 2009
Version:			1.0

	
Description:

	Script to create joints or joint chains on the selected curves.
	

Use and Example:

	Run the "wp_jointsOnCurves()" procedure on the command line
	

*/



//======================================================================
// entry procedure
//======================================================================
global proc wp_jointsOnCurves()
{
	wp_jointOnCurves_window();
}



//======================================================================
// wp_jointOnCurves_window procedure
//======================================================================
global proc wp_jointOnCurves_window () 
{//wp_jointOnCurves_window

if (`window -q -ex wp_jointOnCurves_window`) deleteUI wp_jointOnCurves_window;

window -title "wp Joints on Curves" -maximizeButton off -minimizeButton on -sizeable off -wh 280 65 wp_jointOnCurves_window;

columnLayout;
	// text "Select curves and..."
	text -label "" -h 6;
	rowColumnLayout -numberOfColumns 2 -cw 1 5 -cw 2 150;
		text -label "";
 	    text -label "Joint Chain On Curves" -font "boldLabelFont";
	setParent ..;
	text -label "" -h 6;	
	
	// text infield "Number Of Joints"
	rowColumnLayout -numberOfColumns 3 -cw 1 85 -cw 2 35 -cw 3 60 -cs 1 15 -cs 2 5 -cs 3 5;
		text -label "Number Of Bones";
		intField -minValue 2 -v 10 wp_jointOnCurves_window_numOfJoint_first;
		button -label "Create" -bgc 0.675 0.663 0.843 -c "wp_jointsOnCurves_doIt(\"jointChain\")";
		//int $intFieldNumber = `intField -q -v Number`;
	setParent ..;
	
	// text "Select curves and..."
	text -label "" -h 6;
	rowColumnLayout -numberOfColumns 2 -cw 1 5 -cw 2 150;
		text -label "";
 	    text -label "Joints On Curves" -font "boldLabelFont";
	setParent ..;
	text -label "" -h 6;	
	
	// text infield "Number Of Joints"
	rowColumnLayout -numberOfColumns 3 -cw 1 85 -cw 2 35 -cw 3 60 -cs 1 15 -cs 2 5 -cs 3 5;
		text -label "Number Of Joints";
		intField -minValue 2 -v 10 wp_jointOnCurves_window_numOfJoint_second;
		button -label "Create" -bgc 0.675 0.663 0.843 -c "wp_jointsOnCurves_doIt(\"joint\")";
		//int $intFieldNumber = `intField -q -v Number`;
	setParent ..;
	text -label "" -h 6;
		
	// text "Select curves and..."
	rowColumnLayout -numberOfColumns 2 -cw 1 5 -cw 2 150;
		text -label "";
 	    text -label "Joints On" -font "boldLabelFont";
	setParent ..;
	text -label "" -h 6;	
	
	// text infield "Number Of Joints"
	rowColumnLayout -numberOfColumns 2 -cw 1 94 -cw 2 94 -cs 1 15 -cs 2 2;
		button -label "CV" -bgc 0.675 0.663 0.843 -c "wp_jointOnCV;";
		button -label "EP" -bgc 0.675 0.663 0.843 -c "wp_jointOnEP;";
	setParent ..;
	text -label "" -h 13;	
	
	
showWindow wp_jointOnCurves_window;
window -edit -wh 220 190 wp_jointOnCurves_window;

}//wp_jointOnCurves_window



//======================================================================
// wp_jointOnCV procedure
//======================================================================

global proc wp_jointOnCV() 
{//wp_jointOnCV

	// query dei nomi delle curve
	string $curves[] = `ls -long -sl`;
	int $NumberOfCurves = `size($curves)`;

	if ($NumberOfCurves > 0)
	{
		string $i;
		for ($i in $curves)
		{
			select -r $i;
			string $iShape[] = `pickWalk -d down`;
			
			if (`objectType -isType "nurbsCurve" $iShape[0]`)
			{
				// faccio il query delle spans della curva
				float $NumberOfSpans = `getAttr ($i + ".spans")`;
				// faccio il query del degree della curva
				float $CurveDegree = `getAttr ($i + ".degree")`;
				// calcolo il numero dei CV della curva
				// CV = Span + Degree
				float $NumberOfCV = $NumberOfSpans + $CurveDegree;
				
				int $x = 0;
				int $counter;
				for ($counter = 1; $counter < ($NumberOfCV + 1); $counter++)
				{
						
					select -r ($i + ".cv[" + $x + "]");	
						
					string $TempCluster_[] = `cluster -n TempCluster`;
					
					float $clusterxyz[] = `xform -q -rp $TempCluster_[1]`;
						float $jointX = $clusterxyz[0];
						float $jointY = $clusterxyz[1];
						float $jointZ = $clusterxyz[2];
					
					select -cl;
					string $JointName = "Joint" + $x;
					joint -p $jointX $jointY $jointZ -roo yzx -n $JointName;
					
					$x += 1;
					delete TempClusterHandle;
				}
			}
		}
			
		select -r $curves;
		print "**********************************************************************************\n";
		print "**********************************************************************************\n";
		print "Objects processed:\n";
		print $curves;
		print ("---> " +  $NumberOfCurves + " objects processed <---  read the script editor for more info..");
	}
	else
	{
		error "Select the curves!";
	}
}//wp_jointOnCV



//======================================================================
// wp_jointOnEP procedure
//======================================================================

global proc wp_jointOnEP() 
{//wp_jointOnEP

	// query dei nomi delle curve
	string $curves[] = `ls -long -sl`;
	int $NumberOfCurves = `size($curves)`;

	if ($NumberOfCurves > 0)
	{
		string $i;
		for ($i in $curves)
		{
			select -r $i;
			string $iShape[] = `pickWalk -d down`;
			
			if (`objectType -isType "nurbsCurve" $iShape[0]`)
			{
			
				// faccio il query delle spans della curva
				float $NumberOfSpans = `getAttr ($i + ".spans")`;
				// calcolo il numero degli EP della curva
				// EP = Span + 1
				float $NumberOfEP = $NumberOfSpans + 1;
				
				int $x = 0;
				int $counter;
				for ($counter = 1; $counter < ($NumberOfEP + 1); $counter++)
				{
						
					select -r ($i + ".ep[" + $x + "]");	
						
					string $TempCluster_[] = `cluster -n TempCluster`;
					
					float $clusterxyz[] = `xform -q -rp $TempCluster_[1]`;
						float $jointX = $clusterxyz[0];
						float $jointY = $clusterxyz[1];
						float $jointZ = $clusterxyz[2];
					
					select -cl;
					string $JointName = "Joint" + $x;
					joint -p $jointX $jointY $jointZ -roo yzx -n $JointName;
					
					$x += 1;
					delete TempClusterHandle;
				}
			}
		}
			
		select -r $curves;
		print "**********************************************************************************\n";
		print "**********************************************************************************\n";
		print "Objects processed:\n";
		print $curves;
		print ("---> " +  $NumberOfCurves + " objects processed <---  read the script editor for more info..");
	}
	else
	{
		error "Select the curves!";
	}
}//wp_jointOnEP



//======================================================================
// wp_jointsOnCurves_doIt procedure
//======================================================================

global proc wp_jointsOnCurves_doIt(string $type) 
{//wp_jointsOnCurves_doIt

// query dei nomi delle curve
string $curves[] = `ls -sl -long`;
int $NumberOfCurves = `size($curves)`;
int $NumberOfJoints;

if ($type == "jointChain")
{
	$NumberOfJoints = `intField -q -v wp_jointOnCurves_window_numOfJoint_first`;
}
else if ($type == "joint")
{
	$NumberOfJoints = `intField -q -v wp_jointOnCurves_window_numOfJoint_second`;
}


string $i;
int $curveCount = 0;
for ($i in $curves)
{
	select -r $i;
	string $iShape[] = `pickWalk -d down`;
			
	if (`objectType -isType "nurbsCurve" $iShape[0]`)
	{
		string $pathNodes[];
		int $numTokens = tokenize($i, "|", $pathNodes);
		string $myObj = $pathNodes[$numTokens - 1];
		
		// faccio il query del nome originale della curva (per poterlo riutilizzare in seguito)
		string $OriginalCurveName_ = $i;
		  
		// duplico la curva
		select -r $i ;
		string $newCurve_[] = `duplicate -smartTransform`;
		
		// seleziono la curva duplicata e la freezo
		select $newCurve_[0];
		makeIdentity -apply true -t 1 -r 1 -s 1 -n 0; 
		
		// faccio il rebuild della curva in base al numero di joints che la mia joint Chain deve avere
		//int $numberOfSpans = $NumberOfJoints - 1;
		int $numberOfSpans;
		if ($type == "jointChain")
		{
			$numberOfSpans = $NumberOfJoints;
		}
		else if ($type == "joint")
		{
			$numberOfSpans = $NumberOfJoints - 1;
		}

		rebuildCurve -ch 1 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s $numberOfSpans -d 3 -tol 0.01 $newCurve_[0];
		
		// faccio il query delle spans della curva
		float $NumberOfSpans = `getAttr ($newCurve_[0] + ".spans")`;
		// calcolo il numero degli EP della curva
		// EP = Span + 1
		float $NumberOfEP = $NumberOfSpans + 1;
		
		// faccio il query della posizione del primo EditPoint della curva
		string $ep_0 = $newCurve_[0] + ".ep[0]";
		string $tempCluster[0] = `cluster $ep_0`;
		float $cluster_xyz[] = `xform -q -rp -ws $tempCluster[1]`;
		
		// creo il primo joint della catena
		select -cl;
		string $RootJoint;
		
		if ($type == "jointChain")
		{
			$RootJoint = `joint -p $cluster_xyz[0] $cluster_xyz[1] $cluster_xyz[2] -name ($myObj + "_jointChain")`;
		}
		else if ($type == "joint")
		{
			$RootJoint = `joint -p $cluster_xyz[0] $cluster_xyz[1] $cluster_xyz[2]`;
		}


		delete $tempCluster[1];
		
		// creo la catena di joint
		string $BaseJoint = $RootJoint;
		int $j;
		for ($j = 1; $j < $NumberOfEP; $j++)
		{
			if ($type == "jointChain")
			{
				$ep_0 = $newCurve_[0] + ".ep[" + $j + "]";
				string $tempCluster[0] = `cluster $ep_0`;	
				float $cluster_xyz[] = `xform -q -rp -ws $tempCluster[1]`;
				
				//string $boneName = $myObj + "_joint_" + ($j + 1);
				string $newJoint = `joint -p $cluster_xyz[0] $cluster_xyz[1] $cluster_xyz[2]`;
				
				parent $newJoint $BaseJoint;
				$BaseJoint = $newJoint;
				
				delete $tempCluster[1];
			}
			
			else if ($type == "joint")
			{
				$ep_0 = $newCurve_[0] + ".ep[" + $j + "]";
				string $tempCluster[0] = `cluster $ep_0`;	
				float $cluster_xyz[] = `xform -q -rp -ws $tempCluster[1]`;
				
				//string $boneName = $myObj + "_joint_" + ($j + 1);
				string $newJoint = `joint -p $cluster_xyz[0] $cluster_xyz[1] $cluster_xyz[2]`;
				
				parent -w $newJoint;
				//$BaseJoint = $newJoint;
				
				delete $tempCluster[1];
			}	
			
		}
		
		if ($type == "jointChain")
		{
			// ri-oriento la catena
			select -r $RootJoint;
			joint -e -oj xyz -secondaryAxisOrient yup -ch -zso;
		}

		// elimino la curva duplicata e utilizzata per la costruzione della catena
		delete $newCurve_[0];
		$curveCount++;
	}
}

select -r $curves;
print "**********************************************************************************\n";
print "**********************************************************************************\n";
print "Objects processed:\n";
print $curves;

if ($type == "jointChain")
{
	print ("---> " + $curveCount + " joint chains created <---  read the script editor for more info..");
}
else if ($type == "joint")
{
	print ("---> " + $curveCount + " objects processed <---  read the script editor for more info..");
}

} wp_jointsOnCurves();